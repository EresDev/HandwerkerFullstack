# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: cimg/base:2020.01

        environment:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_HOST: 127.0.0.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install devilbox
          command: |
            git clone https://github.com/cytopia/devilbox
            cd devilbox
            mv ~/project/.circleci/.env ~/devilbox/.env
            docker-compose up -d php mysql httpd
            ./shell.sh
            mkdir hwfs
            cd hwfs
            pwd

#      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#      - run: sudo docker-php-ext-install zip

#      - run:
#          name: Install things we need
#          command: |
#            sudo apt-get update
#            sudo apt-get install -y libzip-dev
#            sudo apt-get install -y zlib1g-dev libicu-dev g++
#            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mariadb-server
#            sudo service mysql restart
#            sudo mysql -e "SET PASSWORD FOR root@localhost = PASSWORD('rpassword');FLUSH PRIVILEGES;"
#            sudo mysqladmin -u root -p '' password ''
#            sudo /usr/bin/mysql_secure_installation


#      - run:
#          name: Fix MySQL socket config
#          command: |
#            sudo sh -c "echo 'pdo_mysql.default_socket=/var/run/mysqld/mysqld.sock' > /usr/local/etc/php/conf.d/pdo.ini"

#      - run:
#          name: Install PHP Extensions
#          command: |
##            sudo apt-get install -y phpenmod
#            sudo a2enmod pdo_mysql
#
#      - run:
#          name: Install Yarn
#          command: |
#            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
#            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
#            sudo apt update && sudo apt install yarn
#      - run:
#          name: Start database server
#          command: |
#            sudo service mysql start

#      - run:
#          name: Create non-admin user
#          command: |
#            sudo mysql -u root -e "CREATE user myuser IDENTIFIED BY 'password';

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            # "composer.lock" can be used if it is committed to the repo
#            - v1-dependencies-{{ checksum "composer.json" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
#
#      - run: composer install -n --prefer-dist
#
#      - save_cache:
#          key: v1-dependencies-{{ checksum "composer.json" }}
#          paths:
#            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: yarn install
#      - save_cache:
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules
#
#      - run:
#          name: Create database and schema
#          command: |
#            php bin/console doctrine:database:create
#            php bin/console doctrine:schema:create
#
#      - run:
#          name: Run tests
#          command: |
#            php bin/console phpunit unit/