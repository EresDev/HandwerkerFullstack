# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: arslanafzal321/php7
      - image: circleci/mysql

        environment:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_HOST: 127.0.0.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      # Cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      #Now run steps to setup and run tests
      - run:
          name: Preview versions
          command: |
            sudo apt-get update
            php --version
            node --version
            yarn --version
      - run:
          name: Generate JWT Keys
          command: |
            cd ~/project
            mkdir -p config/jwt
            openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 -pass pass:7834rhgi8uhgfuw834hr879329hr
            openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout -passin pass:7834rhgi8uhgfuw834hr879329hr
      - run:
          name: Generate Self-signed SSL
          command: |
            cd ~/project/.circleci
            sudo openssl req -nodes -newkey rsa:2048 -keyout nginx-selfsigned.key -out nginx-selfsigned.csr -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=hwfs.local"
      - run:
          name: ENV  setup
          command: |
            cd ~/project
            cp .env.circleci .env
            sudo mv ~/project/.circleci/hwfs.local /etc/nginx/sites-enabled/
            sudo -- sh -c -e "echo '127.0.0.1   hwfs.local' >> /etc/hosts";
            sudo service nginx stop
            sudo service php7.4-fpm stop
            sudo service php7.4-fpm stop
            sudo service php7.4-fpm start
            sudo service nginx start
      - run:
            name: Install Project
            command: |
              cd ~/project
              composer install -n --prefer-dist
              yarn install
              yarn encore dev

      - run:
          name: Create Database
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
            php bin/console doctrine:database:create
            php bin/console doctrine:schema:create

      - run:
          name: Run Tests
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
            php bin/phpunit

