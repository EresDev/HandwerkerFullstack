# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: arslanafzal321/php7
      - image: circleci/mysql

        environment:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_HOST: 127.0.0.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Preview versions
          command: |
            sudo apt-get update
            php --version
            node --version
            yarn --version
      - run:
          name: Generate JWT Keys
          command: |
            cd ~/project
            mkdir -p config/jwt
            openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 -pass pass:7834rhgi8uhgfuw834hr879329hr
            openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout -passin pass:7834rhgi8uhgfuw834hr879329hr
      - run:
          name: ENV  setup
          command: |
            cd ~/project
            cp .env.circleci .env
            sudo mv ~/project/.circleci/hwfs.local /etc/nginx/sites-enabled/
            sudo -- sh -c -e "echo '127.0.0.1   hwfs.local' >> /etc/hosts";
            sudo service nginx stop
            sudo service php7.4-fpm stop
            sudo service php7.4-fpm stop
            sudo service php7.4-fpm start
            sudo service nginx start
      - run:
            name: Install Project
            command: |
              cd ~/project
              composer install
              yarn install
              yarn encore dev

      - run:
          name: Create Database
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
            php bin/console doctrine:database:create
            php bin/console doctrine:schema:create

      - run:
          name: Run Tests
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
            php bin/phpunit

#      - run:
#          name: Install nginx
#          command: |
#            sudo apt -y install nginx
#
#      - run:
#          name: Install systemd
#          command: |
#            sudo apt-get install -y systemd
#
#      - run:
#          name: Install MySQL
#          command: |
#            sudo apt-get install -y mariadb-server mariadb-client
#            ~/project/.circleci/mysql_install.sh

#      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#      - run: sudo docker-php-ext-install zip

#      - run:
#          name: Install things we need
#          command: |
#            sudo apt-get update
#            sudo apt-get install -y libzip-dev
#            sudo apt-get install -y zlib1g-dev libicu-dev g++
#            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mariadb-server
#            sudo service mysql restart
#            sudo mysql -e "SET PASSWORD FOR root@localhost = PASSWORD('rpassword');FLUSH PRIVILEGES;"
#            sudo mysqladmin -u root -p '' password ''
#            sudo /usr/bin/mysql_secure_installation


#      - run:
#          name: Fix MySQL socket config
#          command: |
#            sudo sh -c "echo 'pdo_mysql.default_socket=/var/run/mysqld/mysqld.sock' > /usr/local/etc/php/conf.d/pdo.ini"

#      - run:
#          name: Install PHP Extensions
#          command: |
##            sudo apt-get install -y phpenmod
#            sudo a2enmod pdo_mysql
#
#      - run:
#          name: Install Yarn
#          command: |
#            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
#            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
#            sudo apt update && sudo apt install yarn
#      - run:
#          name: Start database server
#          command: |
#            sudo service mysql start

#      - run:
#          name: Create non-admin user
#          command: |
#            sudo mysql -u root -e "CREATE user myuser IDENTIFIED BY 'password';

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            # "composer.lock" can be used if it is committed to the repo
#            - v1-dependencies-{{ checksum "composer.json" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
#
#      - run: composer install -n --prefer-dist
#
#      - save_cache:
#          key: v1-dependencies-{{ checksum "composer.json" }}
#          paths:
#            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: yarn install
#      - save_cache:
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules
#
#      - run:
#          name: Create database and schema
#          command: |
#            php bin/console doctrine:database:create
#            php bin/console doctrine:schema:create
#
#      - run:
#          name: Run tests
#          command: |
#            php bin/console phpunit unit/